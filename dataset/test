from PyQt5.QtWidgets import *
import cv2 as cv
import numpy as np
import random, os, sys

class ModelWindow(QWidget):
    def __init__(self, model_img):
        super().__init__()
        self.setWindowTitle("모델 이미지")
        self.setGeometry(200, 200, 400, 400)

        label = QLabel(self)
        pixmap = QPixmap(model_img)
        label.setPixmap(pixmap)
        label.setAlignment(Qt.AlignCenter)

class Video(QMainWindow):
    def __init__(self) :
        super().__init__()
        self.setWindowTitle("비교")
        self.setGeometry(200,200,500,100)

        videoButton=QPushButton("ON",self)    
        captureButton=QPushButton("모델",self)
        matchButton=QPushButton("매칭",self)
        quitButton=QPushButton("나가기",self)
        
        videoButton.setGeometry(10,10,100,30)        
        captureButton.setGeometry(110,10,100,30)
        matchButton.setGeometry(210,10,100,30)
        quitButton.setGeometry(310,10,100,30)
        
        videoButton.clicked.connect(self.videoFunction) 
        captureButton.clicked.connect(self.captureFunction)         
        matchButton.clicked.connect(self.matchFunction)
        quitButton.clicked.connect(self.quitFunction)
        
        self.image_folder_path = "D:/python_workspace/tangramplay"

        self.load_images()
        self.model_window = None

    def load_images(self):
        self.template_images = []
        for filename in os.listdir(self.image_folder_path):
            if filename.endswith(".png") or filename.endswith(".jpg"):
                img_path = os.path.join(self.image_folder_path, filename)
                template_img = cv.imread(img_path)
                self.template_images.append((filename, template_img))
        
    def videoFunction(self):
        self.cap=cv.VideoCapture(0,cv.CAP_DSHOW)
        if not self.cap.isOpened(): self.close()
            
        while True:
            ret,self.frame=self.cap.read() 
            if not ret: break            
            cv.imshow("display",self.frame)
            cv.waitKey(1)
        
    def captureFunction(self): 
        self.capturedFrame=self.frame
        cv.imshow("img",self.capturedFrame)
        
    def matchFunction(self):       
        gray2=cv.cvtColor(self.capturedFrame,cv.COLOR_BGR2GRAY)

        sift=cv.SIFT_create()
        kp2, des2 = sift.detectAndCompute(gray2, None)

        flann_matcher=cv.DescriptorMatcher_create(cv.DescriptorMatcher_FLANNBASED)

        best_match_ratio = 0.0
        best_match_filename = ""
        best_match_img = None
       
        random_template = random.choice(self.template_images) # 랜덤 검증용 이미지 선택
        filename, template_img = random_template

        gray1=cv.cvtColor(template_img,cv.COLOR_BGR2GRAY)
        kp1, des1 = sift.detectAndCompute(gray1, None)

        knn_match=flann_matcher.knnMatch(des1, des2, 2)

        T=0.7
        good_match=[]
        for nearest1, nearest2 in knn_match:
            if (nearest1.distance / nearest2.distance) < T:
                good_match.append(nearest1)

        match_ratio = len(good_match) / len(knn_match)

        if match_ratio > best_match_ratio:
            best_match_ratio = match_ratio
            best_match_filename = filename
            best_match_img = template_img

        if best_match_img is not None:
            img_match=np.empty((max(best_match_img.shape[0], self.capturedFrame.shape[0]), best_match_img.shape[1]+self.capturedFrame.shape[1], 3), dtype=np.uint8)
            cv.drawMatches(best_match_img, kp1, self.capturedFrame, kp2, good_match, img_match, flags=cv.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS)
            cv.imshow(f"Match: {best_match_filename}", img_match)
            print("성공")
        else:
            print("틀렸다.")
        
    def quitFunction(self):
        self.cap.release()
        cv.destroyAllWindows()
        self.close()
                
app=QApplication(sys.argv) 
win=Video() 
win.show()
app.exec_()
