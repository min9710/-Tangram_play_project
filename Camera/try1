from PyQt5.QtWidgets import *
import sys
import cv2 as cv
import numpy as np
import os
import random

class Video(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('비디오에서 프레임 수집')
        self.setGeometry(200, 200, 500, 100)

        videoButton = QPushButton('비디오 켜기', self)
        randomImgButton = QPushButton('칠교 이미지 선택', self)
        matchButton = QPushButton('매칭', self)
        quitButton = QPushButton('나가기', self)

        videoButton.setGeometry(10, 10, 100, 30)
        randomImgButton.setGeometry(110, 10, 150, 30)
        matchButton.setGeometry(270, 10, 100, 30)
        quitButton.setGeometry(370, 10, 100, 30)

        videoButton.clicked.connect(self.videoFunction)
        randomImgButton.clicked.connect(self.randomImgFunction)
        matchButton.clicked.connect(self.matchFunction)
        quitButton.clicked.connect(self.quitFunction)

        self.image_folder_path = "D:/workpy/PJ_tangram/tangramplay"  # 이미지 파일들이 있는 폴더 경로를 지정
        self.template_images = []

        self.load_images()

    def load_images(self):
        for filename in os.listdir(self.image_folder_path):
            if filename.endswith(".png") or filename.endswith(".jpg"):
                img_path = os.path.join(self.image_folder_path, filename)
                template_img = cv.imread(img_path)
                self.template_images.append((filename, template_img))

    def videoFunction(self):
        self.cap = cv.VideoCapture(0, cv.CAP_DSHOW)
        if not self.cap.isOpened():
            self.close()

        while True:
            ret, self.frame = self.cap.read()
            if not ret:
                break
            cv.imshow('video display', self.frame)
            cv.waitKey(1)

    def randomImgFunction(self):
        # 랜덤하게 이미지 선택
        random_image = random.choice(self.template_images)
        self.randomImg = random_image[1]
        cv.imshow('Random Image', self.randomImg)

    def matchFunction(self):
        if not hasattr(self, 'randomImg'):
            print("이미지를 먼저 선택해주세요.")
            return

        gray2 = cv.cvtColor(self.frame, cv.COLOR_BGR2GRAY)

        sift = cv.SIFT_create()
        kp2, des2 = sift.detectAndCompute(gray2, None)

        flann_matcher = cv.DescriptorMatcher_create(cv.DescriptorMatcher_FLANNBASED)

        best_match_ratio = 0.0
        best_match_filename = ""
        best_match_img = None

        gray1 = cv.cvtColor(self.randomImg, cv.COLOR_BGR2GRAY)
        kp1, des1 = sift.detectAndCompute(gray1, None)

        knn_match = flann_matcher.knnMatch(des1, des2, 2)

        T = 0.7
        good_match = []
        for nearest1, nearest2 in knn_match:
            if (nearest1.distance / nearest2.distance) < T:
                good_match.append(nearest1)

        match_ratio = len(good_match) / len(knn_match)

        if match_ratio > best_match_ratio:
            best_match_ratio = match_ratio
            best_match_filename = "Random Image"
            best_match_img = self.randomImg

        if best_match_img is not None:
            img_match = np.empty(
                (max(best_match_img.shape[0], self.frame.shape[0]), best_match_img.shape[1] + self.frame.shape[1], 3),
                dtype=np.uint8)
            cv.drawMatches(best_match_img, kp1, self.frame, kp2, good_match, img_match,
                           flags=cv.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS)
            cv.imshow(f'Best Match: {best_match_filename}', img_match)
        else:
            print("No good match found.")

    def quitFunction(self):
        self.cap.release()
        cv.destroyAllWindows()
        self.close()

app = QApplication(sys.argv)
win = Video()
win.show()
app.exec_()
